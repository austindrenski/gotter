variable "BUILDKIT_BUILD_NAME" {
  default     = ""
  description = "Overrides the build name shown in `buildx history` command. See: https://docs.docker.com/reference/cli/docker/buildx/history/"
  type        = string
}

variable "BUILDKIT_CACHE_MOUNT_NS" {
  default     = OTEL_VCS_REPOSITORY_NAME
  description = "Set optional cache ID namespace."
  type        = string
}

variable "BUILDX_GIT_CHECK_DIRTY" {
  default     = false
  description = "When set to true, checks for dirty state in source control information for provenance attestations. See: https://docs.docker.com/build/building/variables/#buildx_git_check_dirty"
  type        = bool

  validation {
    condition     = !CI || BUILDX_GIT_CHECK_DIRTY
    error_message = "Callers should set the following environment variable when CI=true: BUILDX_GIT_CHECK_DIRTY=true"
  }
}

variable "BUILDX_GIT_LABELS" {
  default     = false
  description = "Adds provenance labels, based on Git information, to images that you build. See: https://docs.docker.com/build/building/variables/#buildx_git_labels"
  type        = bool

  validation {
    condition     = !CI || BUILDX_GIT_LABELS
    error_message = "Callers should set the following environment variable when CI=true: BUILDX_GIT_LABELS=true"
  }
}

variable "BUILDX_METADATA_WARNINGS" {
  default     = false
  description = "By default, Buildx does not include build warnings in the metadata file through --metadata-file flag. You can set this environment variable to 1 or true to include them. See: https://docs.docker.com/build/building/variables/#buildx_metadata_warnings"
  type        = bool

  validation {
    condition     = !CI || BUILDX_METADATA_WARNINGS
    error_message = "Callers should set the following environment variable when CI=true: BUILDX_METADATA_WARNINGS=true"
  }
}

variable "CI" {
  default     = false
  description = "Set to true when running in a CI environment (e.g. GitHub Actions)"
  type        = bool
}

variable "OTEL_CICD_PIPELINE_RUN_ID" {
  default     = 0
  description = "The unique identifier of a pipeline run within a CI/CD system."
  type        = number
}

variable "OTEL_CICD_PIPELINE_RUN_URL_FULL" {
  default     = "${OTEL_VCS_REPOSITORY_URL_FULL}/actions/runs/${OTEL_CICD_PIPELINE_RUN_ID}"
  description = "The URL of the pipeline run, providing the complete address in order to locate and identify the pipeline run."
  type        = string
}

variable "OTEL_VCS_CHANGE_ID" {
  default     = ""
  description = "The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system."
  type        = string
}

variable "OTEL_VCS_OWNER_NAME" {
  default     = "austindrenski"
  description = "The group owner within the version control system."
  type        = string

  validation {
    condition     = OTEL_VCS_OWNER_NAME != ""
    error_message = "Callers must set the following environment variable: OTEL_VCS_OWNER_NAME"
  }
}

variable "OTEL_VCS_REF_BASE_NAME" {
  default     = ""
  description = "The name of the reference such as branch or tag in the repository."
  type        = string
}

variable "OTEL_VCS_REF_BASE_REVISION" {
  default     = ""
  description = "The revision, literally revised version, The revision most often refers to a commit object in Git, or a revision number in SVN."
  type        = string
}

variable "OTEL_VCS_REF_BASE_TYPE" {
  default     = ""
  description = "The type of the reference in the repository."
  type        = string
}

variable "OTEL_VCS_REF_HEAD_NAME" {
  default     = "local"
  description = "The name of the reference such as branch or tag in the repository."
  type        = string

  validation {
    condition     = !CI || OTEL_VCS_REF_HEAD_NAME != "" && OTEL_VCS_REF_HEAD_NAME != "local"
    error_message = "Callers should set the following environment variable when CI=true: OTEL_VCS_REF_HEAD_NAME=$(git symbolic-ref --short HEAD)"
  }
}

variable "OTEL_VCS_REF_HEAD_REVISION" {
  default     = ""
  description = "The revision, literally revised version, The revision most often refers to a commit object in Git, or a revision number in SVN."
  type        = string

  validation {
    condition     = !CI || OTEL_VCS_REF_HEAD_REVISION != ""
    error_message = "Callers must set the following environment variable when CI=true: OTEL_VCS_REF_HEAD_REVISION=$(git rev-parse HEAD)"
  }
}

variable "OTEL_VCS_REF_HEAD_TYPE" {
  default     = "branch"
  description = "The type of the reference in the repository."
  type        = string

  validation {
    condition     = OTEL_VCS_REF_HEAD_TYPE == "branch" || OTEL_VCS_REF_HEAD_TYPE == "tag"
    error_message = "Callers must set the following environment variable: OTEL_VCS_REF_HEAD_TYPE"
  }
}

variable "OTEL_VCS_REPOSITORY_NAME" {
  default     = "gotter"
  description = "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub."
  type        = string

  validation {
    condition     = OTEL_VCS_REPOSITORY_NAME != ""
    error_message = "Callers must set the following environment variable: OTEL_VCS_REPOSITORY_NAME"
  }
}

variable "OTEL_VCS_REPOSITORY_URL_FULL" {
  default     = "https://github.com/${OTEL_VCS_OWNER_NAME}/${OTEL_VCS_REPOSITORY_NAME}"
  description = "The canonical URL of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser."
  type        = string

  validation {
    condition     = OTEL_VCS_REPOSITORY_URL_FULL != ""
    error_message = "Callers must set the following environment variable: OTEL_VCS_REPOSITORY_URL_FULL"
  }
}

variable "REGISTRY" {
  default     = "ghcr.io/${lower(OTEL_VCS_OWNER_NAME)}"
  description = "The container registry used to pull cache layers and to push images"
  type        = string
}

variable "SOURCE_DATE_EPOCH" {
  default     = 0
  description = "The build timestamp for reproducible builds in seconds since the Unix epoch (see: https://reproducible-builds.org/docs/source-date-epoch/)"
  type        = number

  validation {
    condition     = !CI || SOURCE_DATE_EPOCH > 0
    error_message = "Callers should set the environment variable when CI=true: SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)"
  }
}

variable "VERSION" {
  default     = (join("-", compact([VERSION_PREFIX, VERSION_SUFFIX])))
  description = "The full semver version variable computed from `VERSION_PREFIX` and `VERSION_SUFFIX` (i.e. `MAJOR.MINOR.PATCH-pre.release.info+build.info`)"
  type        = string

  validation {
    condition     = length(regexall("^\\d+\\.\\d+\\.\\d+(-.+?)?$", VERSION)) == 1
    error_message = "VERSION=${VERSION} does not meet semver requirements"
  }

  validation {
    condition     = VERSION == join("-", compact([VERSION_PREFIX, VERSION_SUFFIX]))
    error_message = "VERSION=${VERSION} must be computed from `VERSION_PREFIX` and `VERSION_SUFFIX`"
  }
}

variable "VERSION_PREFIX" {
  default     = "0.1.0"
  description = "The semver prefix (i.e. `MAJOR.MINOR.PATCH`) used to compute the `VERSION` variable"
  type        = string

  validation {
    condition     = length(regexall("^\\d+\\.\\d+\\.\\d+$", VERSION_PREFIX)) == 1
    error_message = "VERSION_PREFIX=${VERSION_PREFIX} does not meet semver requirements"
  }
}

variable "VERSION_SUFFIX" {
  default     = OTEL_VCS_REF_HEAD_TYPE == "tag" ? "" : format("ci.%s", lower(regex_replace(OTEL_VCS_REF_HEAD_NAME, "[^[:alnum:]]", "-")))
  description = "The semver suffix (i.e. `pre.release.info`) used to compute the `VERSION` variable"
  type        = string
}

group "default" {
  targets = [target.gotter.name]
}

target "__buildkit_builtin" {
  # https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args
  args = {
    BUILDKIT_BUILD_NAME            = BUILDKIT_BUILD_NAME
    BUILDKIT_CACHE_MOUNT_NS        = BUILDKIT_CACHE_MOUNT_NS
    BUILDKIT_CONTEXT_KEEP_GIT_DIR  = true
    BUILDKIT_DOCKERFILE_CHECK      = "error=true"
    BUILDKIT_HISTORY_PROVENANCE_V1 = true
    BUILDKIT_INLINE_CACHE          = false
    BUILDKIT_MULTI_PLATFORM        = true
    BUILDKIT_SANDBOX_HOSTNAME      = "buildkitsandbox"
    BUILDKIT_SBOM_SCAN_CONTEXT     = true
    BUILDKIT_SBOM_SCAN_STAGE       = true
    BUILDKIT_SYNTAX                = "docker/dockerfile:1.17.0-labs"
    SOURCE_DATE_EPOCH              = SOURCE_DATE_EPOCH
  }
}

target "__otel_semconv_attrs" {
  # https://opentelemetry.io/docs/specs/semconv/registry/attributes/
  args = {
    OTEL_CICD_PIPELINE_RUN_ID    = OTEL_CICD_PIPELINE_RUN_ID
    OTEL_VCS_CHANGE_ID           = OTEL_VCS_CHANGE_ID
    OTEL_VCS_OWNER_NAME          = OTEL_VCS_OWNER_NAME
    OTEL_VCS_REF_BASE_NAME       = OTEL_VCS_REF_BASE_NAME
    OTEL_VCS_REF_BASE_REVISION   = OTEL_VCS_REF_BASE_REVISION
    OTEL_VCS_REF_BASE_TYPE       = OTEL_VCS_REF_BASE_TYPE
    OTEL_VCS_REF_HEAD_NAME       = OTEL_VCS_REF_HEAD_NAME
    OTEL_VCS_REF_HEAD_REVISION   = OTEL_VCS_REF_HEAD_REVISION
    OTEL_VCS_REF_HEAD_TYPE       = OTEL_VCS_REF_HEAD_TYPE
    OTEL_VCS_REPOSITORY_NAME     = OTEL_VCS_REPOSITORY_NAME
    OTEL_VCS_REPOSITORY_URL_FULL = OTEL_VCS_REPOSITORY_URL_FULL
  }
  labels = {
    "otel.cicd.pipeline.run.id"       = OTEL_CICD_PIPELINE_RUN_ID
    "otel.cicd.pipeline.run.url.full" = OTEL_CICD_PIPELINE_RUN_URL_FULL
    "otel.vcs.change.id"              = OTEL_VCS_CHANGE_ID
    "otel.vcs.owner.name"             = OTEL_VCS_OWNER_NAME
    "otel.vcs.ref.base.name"          = OTEL_VCS_REF_BASE_NAME
    "otel.vcs.ref.base.revision"      = OTEL_VCS_REF_BASE_REVISION
    "otel.vcs.ref.base.type"          = OTEL_VCS_REF_BASE_TYPE
    "otel.vcs.ref.head.name"          = OTEL_VCS_REF_HEAD_NAME
    "otel.vcs.ref.head.revision"      = OTEL_VCS_REF_HEAD_REVISION
    "otel.vcs.ref.head.type"          = OTEL_VCS_REF_HEAD_TYPE
    "otel.vcs.repository.name"        = OTEL_VCS_REPOSITORY_NAME
    "otel.vcs.repository.url.full"    = OTEL_VCS_REPOSITORY_URL_FULL
  }
}

target "gotter" {
  args = {
    VERSION = VERSION
  }
  attest = [
    { type = "provenance", mode = "max" },
    { type = "sbom" }
  ]
  cache-from = cache_from(target.gotter.name)
  cache-to = cache_to(target.gotter.name)
  dockerfile = "Dockerfile"
  inherits = [
    target.__buildkit_builtin.name,
    target.__otel_semconv_attrs.name
  ]
  labels = {
    "org.opencontainers.image.authors"       = "Austin Drenski <austin@austindrenski.io>"
    "org.opencontainers.image.documentation" = "https://github.com/${OTEL_VCS_OWNER_NAME}/${OTEL_VCS_REPOSITORY_NAME}"
    "org.opencontainers.image.name"          = target.gotter.name
    "org.opencontainers.image.url"           = OTEL_VCS_REPOSITORY_URL_FULL
    "org.opencontainers.image.vendor"        = OTEL_VCS_OWNER_NAME
    "org.opencontainers.image.version"       = VERSION
  }
  output = [
    { type = "image", rewrite-timestamp = true },
    { type = "local", dest = ".bin" }
  ]
  platforms = [
    "linux/arm64",
    "linux/amd64",
    "windows/amd64"
  ]
  tags = tags(target.gotter.labels)
  target = target.gotter.name
}

function "cache_from" {
  params = []
  variadic_params = targets

  result = [
    for v in setproduct(compact([OTEL_VCS_REF_BASE_NAME, OTEL_VCS_REF_HEAD_NAME, "main"]), targets) :
    {
      ref = image_cache_ref(v...)
      type = "registry"
    }
  ]
}

function "cache_to" {
  params = []
  variadic_params = targets

  result = CI ? [
    for v in setproduct([OTEL_VCS_REF_HEAD_NAME], targets) :
    {
      mode = "max"
      ref = image_cache_ref(v...)
      type = "registry"
    }
  ] : []
}

function "image" {
  params = [labels]

  result = labels["org.opencontainers.image.name"]
}

function "image_cache_ref" {
  params = []
  variadic_params = keys

  result = format("%s/%s/buildkit_cache:%s", REGISTRY, OTEL_VCS_REPOSITORY_NAME, join(".", [
    for k in keys :
    lower(regex_replace(k, "[^[:alnum:]]", "-"))
  ]))
}

function "tags" {
  params = [labels]

  result = formatlist("%s/%s:%s", REGISTRY, image(labels), compact([VERSION == VERSION_PREFIX ? "latest" : null, VERSION]))
}
